#+TITLE: Notes

Notes aiming to provide reflection and insight on the process, so I can improve
my methodology.

* Times/day summaries

#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2021-12-12 Sun 15:48]
| Headline                | Time    |      |
|-------------------------+---------+------|
| *Total time*            | *19:25* |      |
|-------------------------+---------+------|
| Tracking and Reflection | 19:25   |      |
| \_  Day 5               |         | 1:53 |
| \_  Day 6               |         | 1:09 |
| \_  Day 7               |         | 2:31 |
| \_  Day 8               |         | 2:30 |
| \_  Day 9               |         | 2:43 |
| \_  Day 10              |         | 1:46 |
| \_  Day 11              |         | 4:05 |
| \_  Day 12              |         | 2:48 |
#+END:

* Process

An evolving checklist of "best practices" emerging as I work through the
problems.

1. Add [[* Template][new entry]] for notes for the day and clock in
2. Initialize scaffolding with =dune exec init <N>=
3. Set populate input data
   - Copy test input into =./test/dayN.t/test=
   - Copy puzzle input into =./test/dayN.t/input=
3. Extract semi-formal specification from puzzle description (as bullet points)
4. Write implementation plan as bullet points
5. Specify the =Domain= interface
6. Implement preliminary =Solver= algorithm (usually calling for adjustments to =Domain=)
7. Implement =Domain= in =D=

* Tracking and Reflection
** DONE Days 1 to 5

Was not taking notes or recording times.

Main takeaways:

- Avoid refactoring foo: some refactoring to reuse parts can be help accelerate,
  but it's also an easy place to procrastinate and avoid actually tackling the
  problems.
- Specify problems at type level *before* implementing. Helps prevent losing
  focus, since you can focus just on the high level representation, then get the
  type checker to give an interactive "checklist" of values you need to
  implement.
- If the aim is time-efficient implementations, don't rely on OCaml's till
  impoverished stdlib. I ended up having to implement too many basic utility
  functions. From Day 5 on, I'm helping myself to [[https://github.com/c-cube/ocaml-containers][Containers]].
- Bullet-point out the key details of the specification before starting to code
  up anything. Most of the mistakes that have slowed me down have come from
  making minor mistakes at the value-level during specification.

** DONE Day 5
:LOGBOOK:
CLOCK: [2021-12-05 Sun 12:00]--[2021-12-05 Sun 12:13] =>  0:13
CLOCK: [2021-12-05 Sun 09:28]--[2021-12-05 Sun 09:49] =>  0:21
CLOCK: [2021-12-05 Sun 08:04]--[2021-12-05 Sun 09:23] =>  1:19
:END:

*** Implementation

[[./bin/day5.ml][Solution]]

**** Errors
- Was initializing map locations incorrectly initially, setting them to 0 at the
  first marked point, rather to 1.
- Misread the specification: it called for returning the *number of points with
  2 or more overlapping vents*, but I was returning *the sum of all spaces with
  2 or more overlapping vents*.

Both of these errors are results of not carefully attending to *specific value
ranges* detailed by the specification.
**** To improve

- Bullet-point specification in english before writing formalizing specification
  in types.

** DONE Day 6
:LOGBOOK:
CLOCK: [2021-12-06 Mon 02:26]--[2021-12-06 Mon 03:35] =>  1:09
:END:

*** Specification

- Given :: A list of numbers representing ages of lanternfish
- Produce :: The number of fish expected at 80 days
- Domain ::
  - Each mature lanternfish creates a new fish after 7 days
  - Newly born lanternfish take +2 days to mature

- Representation ::
  - Represent each lantern fish as a single number, which acts as a counter
  - Represent a day passing as an iteration that reduces all counters
  - 1 new counter is created when any counter decreases from 0
  - A new counter start at 8 (2 days to mature + 7 days to produce)
  - After a counter reaches 0, it resets to 6

*** Implementation
[[./bin/day6.ml][Solution]]

- We only have 9 counter states to track: 0 to 8.
- To compute the number of new counters spawned, we need only track how many of
  each counter are in each state.
- So we can represent the state space as an =int Array.t= of length 9, where the
  =j_th= int represents the number of counters in that state.
- Proof that this alternative representation is equivalent to the one
  specified is given by the pair of functions

    - =array_to_counters : int Array.t -> int list=
    - =counters_to_array : int list -> int Array.t=

  defining an isomorphic mapping between the compressed representation and the
  list of counters.

*** Reflection

Today went very smoothly. Whether it was because today's puzzle was easier, or
admitted an elegant solution more easily than previous days, whether I just got
lucky striking on the right representation, or whether my process improvements
may be helping, I feel that it was pretty nearly ideal.

I also used an imperative solution today. I wonder if this could have
contributed to the cleaner process in this (particular) case?

**** Errors
Two small errors in counter increment logic.

- I placed the updates adding the new counters and the reset counters in the
  same loop used to shift the counters to the left.
- I had an off by one error, setting the expired counters to index 5 instead of
  6.

**** To improve
- Write implementation plan in bullet points first.
- *Keep the domain abstract*. This gives much more flexibility in improving the
  representation, which you'll likely want to do, since working the problem will
  bring more insight into the structures you can draw upon.
- [[https://www.youtube.com/playlist?list=PLqgbyDNJ3NvVBYzC5CJ_9sjcnx2pueo4h]["first thought, best thought"]] is usually not the case, so give the initial
  representation and strategy a second thought.
- Writing out algorithm in bullet points prior to coding may have helped
  avoid the two errors I encountered.
** DONE Day 7
:LOGBOOK:
CLOCK: [2021-12-07 Tue 22:00]--[2021-12-07 Tue 22:48] =>  0:48
CLOCK: [2021-12-07 Tue 21:01]--[2021-12-07 Tue 21:32] =>  0:31
CLOCK: [2021-12-07 Tue 20:38]--[2021-12-07 Tue 20:39] =>  0:01
CLOCK: [2021-12-07 Tue 19:45]--[2021-12-07 Tue 20:35] =>  0:50
CLOCK: [2021-12-07 Tue 07:56]--[2021-12-07 Tue 08:17] =>  0:21
:END:
*** Specification
- input: horizontal positions of crab submarines
- aim: get all horizontal positions to match while minimizing fuel expenditure
- output: integer representing the least amount of fuel needed to make all
  horizontal positions equal

- crab submarines
- each crab has a horizontal position
- each crab has limited fuel
- moving horizontal position by 1 unit costs 1 unit of fuel

*** Implementation

- Some preliminary research indicates that a truly elegant structure might be
  found by looking at [[https://en.wikipedia.org/wiki/Graph_bandwidth][graph bandwidth]] problems. But I think the overhead for me
  getting conversant with the prerequisites to encode that effectively will be
  too costly.

- Similar to the compression for day 6, we can group each "crab" by sets of
  values. So we can use a hashmap of =int -> int=, where the key is the
  position of the crab and the value is the number of grabs at that position.
  Then we can calculate the fuel cost to =x= for all crabs as =|x - position| *
  num_crabs=.
- To find the alignment position requiring minimum adjustment, we can do a
  binary search starting with the min and max positions in the set.
  - There is probably an optimization to be found here by taking into account
    how many crabs are at each position, but I won't bother with this unless I
    hit a bottlneck.

Plan:

- Parse in crab positions
- Get min and max positions
- Create hashmap: =position -> num_crabs=
- Get mean of positions
- Find cost of mean position
- Get cost of mean +/- 1
  - If +1 is lower than mean, then search ascending
  - If -1 is lower than mean, then search descending
- Stop search when next post is more costly than prev

[[./bin/day7.ml][Solution]]
*** Reflection

I wasn't able to block out contiguous time to focus to today, so that made
things a bit slower and more muddled.

I also didn't hit a really elegant solution comparable to yesterday. I think
such a solution would have been available if I knew more math facts, but I just
didn't have the mechanisms at hand. Part 2 still completes in 0.004 seconds, so
it's relatively performant, but it's the code itself feels a bit ad hoc.

Still, my process overall is working pretty well.

**** Errors
- Confused the placement of arguments in initial search for min value
- Forgot to handle zero case in my triangle number function
**** To improve
...

** DONE Day 8
:LOGBOOK:
CLOCK: [2021-12-08 Wed 20:56]--[2021-12-08 Wed 21:33] =>  0:37
CLOCK: [2021-12-08 Wed 19:26]--[2021-12-08 Wed 20:21] =>  0:55
CLOCK: [2021-12-08 Wed 19:20]--[2021-12-08 Wed 19:23] =>  0:03
CLOCK: [2021-12-08 Wed 17:37]--[2021-12-08 Wed 17:54] =>  0:17
CLOCK: [2021-12-08 Wed 08:11]--[2021-12-08 Wed 08:13] =>  0:02
CLOCK: [2021-12-08 Wed 07:35]--[2021-12-08 Wed 08:11] =>  0:36
:END:
*** Specification

- Input: Lines of entries correlating signal patterns to output values

- Signal patterns and output values in an entry are separated by `|`
- Each entry has 10 unique signal patterns, representing how the 10 digits of a
  clock are signaled.
- Each entry has a four digit output value
- ...

**** Part 1:
- Output: Count of the number of times 1, 4, 7, or 8 appear in output values

- These 4 digits have a unique number of segments:
  - 1 :: 2
  - 4 :: 4
  - 7 :: 3
  - 8 :: 7
- So we can identify them in the outputs simply by counting encoded digits that
  have the respective number of segments.

**** Part 2:

- Output: The sum of all output values

- Using the uniquely identifiable digits as reference, we can decode the
  segments triggered by each signal.
- Use the decoding algorithm to decode all outputs
- Then return their sum

*** Implementation
[[./bin/day8.ml][Solution]]

**** Part 1

- Parse each line into representation that groups the signal patterns and the
  output values (for now, we can just work on a sequence of such representation,
  because we only need to traverse once.)
- Fold over the seq, counting the number of "digits" (strings) in the output
  values that have segments in the specified unique values.

**** Part 2

- Each digit is uniquely represented as a set of characters (which represent
  the signals)
- Determine the encoding of the signal on each entry using the following chart:

  | Digit | Segments | Id By                   |
  |-------+----------+-------------------------|
  |     1 | #2       | uniq #2                 |
  |     7 | #3       | uniq #3                 |
  |     4 | #4       | uniq #4                 |
  |     2 | #5       | remaining #5            |
  |     5 | #5       | intersection of 9 and 6 |
  |     3 | #5       | #5 where 1 is subset    |
  |     0 | #6       | #6 where 7 is subset    |
  |     6 | #6       | remaining #6            |
  |     9 | #6       | #6 where 4 is subset    |
  |     8 | #7       | uniq #7                 |

- Represent the encoding as a map from sets to ints
- Lookup the digital value of each char set in the outputs
- Construct the int based on the digits
- Fold over of the decoded ints to sum them

*** Reflection

- Completed part 1 in ~30 mins with no errors. But it was very simple.
- Part 2 took me an additional 2 hours. Some complication from unrelated
  emotional distress, and some from having to fight some unhelpful negative
  thought patterns.
    - Namely, when some problems take a lot of time, or I get confused while
      working through something, I have a tendency to start judging,
      belittling, and being impatient with myself. Thinking such toxic thoughts
      as: you are too stupid to do this kind of work, you are too slow, you
      can't think clearly, why don't you have enough energy/stamina etc.
    - It took me some moments to catch this bad pattern taking shape, and to
      remind myself that to be patient and kind to myself. These kinds of things
      can be hard. And, in any case, I am only trying to learn, to improve, and
      to have fun!

**** Errors
No errors! I'm quite surprised, but my solutions to both parts worked correctly
on the test input first try, and no errors were made when translating my
specs and plans into implementation.
**** To improve
I neglected to exercise today or yesterday (aside from a short walk). I suspect
this is taking a toll. So, I must make time for this tomorrow.

** DONE Day 9
:LOGBOOK:
CLOCK: [2021-12-09 Thu 21:25]--[2021-12-09 Fri 22:20] =>  0:55
CLOCK: [2021-12-09 Thu 10:05]--[2021-12-09 Thu 11:06] =>  1:01
CLOCK: [2021-12-09 Thu 09:58]--[2021-12-09 Thu 09:59] =>  0:01
CLOCK: [2021-12-09 Thu 07:10]--[2021-12-09 Thu 07:56] =>  0:46
:END:
*** Specification
**** Part 1
- Input: a 2-d matrix of single digit numbers, representing heights of each position
- Output: The sum of the *risk levels* of the *low points*

- low point :: locations with a lower value than all adjacent positions
- adjacent positions :: Positions in the matrix are only considered to have straight (not diagonal) adjacency, so max 4 adjacent points to each position.
- risk level :: 1 plus the height

**** Part 2
- Input: a 2-d matrix of single digit numbers, representing heights of each position
- Output: The sum of the sizes of the 3 largets *basins*

- basin :: A contiguous area of adjacent positions < 9
*** Implementation
[[./bin/day9.ml][Solution]]

**** Part 1
- read input 2-d matrix of ints
- identify low points
  - for each position in the matrix, measure whether it is < all adjacent
    position intos
  - adjacent positions given by +/1 each of x and y indices (use safe get values
    to detect edges and corners).
- calculate risk
  - position + 1
- sum calculated risk in accumulator constructed while scanning the matrix

**** Part 2
- represent map as 2-d matrix of ={x: int, y: int, height: int; marked: bool}=
- beginning with the top left position, start a basin size counter
  - check whether the current position is < 9
  - if so,
    - mark the position
    - get all adjacent positions < 9
    - add 1 to size counter
    - repeat for adjacent
  - otherwise, return the current size
- keep a sorted list of the bason sizes
- after all basins are marked, return the sum of the 3 biggest sizes

*** Reflection
**** Errors
- First run of part 1 produced 0.

  This turned out to be due to the way that the implementation of `Seq.to_array`
  is defined in containers. It first iterates through the whole sequence to get
  the length, and this breaks the functionality with Seq! >:(
  https://github.com/c-cube/ocaml-containers/blob/74954f53a0e5cb87ab6ce7affac23dd2ba2812eb/src/core/CCSeq.ml#L397

- This is the second time very surprising behavior with Seq has caused huge time
  blocks.
- Part 2: My logic in the map search routine ended up quite ad hoc and sloppy. I
  should have just build up a graph of connected edges and done a standard
  search, but instead I tried to work off of the matrix, and didn't think
  through my algorithm carefully enough before diving in.
- I burnt like 2 hours implementing the start of a lazy sequence library to
  avoid the problem I kept hitting with mutable state. I got a much better for
  the dance of interweaving thunks between lazy/force required for such libs,
  but I almost ran out of time to complete the AOC challenges and still get
  enough sleep.
**** To improve
- [x] Implement (lazy so memoized?) streaming from file?
  - Later... Before even completing part 2 I've ported everything to a properly lazy
    (i.e., memoized) stream based interface, which should protect me from these
    kinds of mistakes in the future!
- Unless you want to spend hours upon hours implementing basic lib utilities
  (fun! but not sustainable alongside doing AOC in my free time), or you want to
  do very mercenary implementations without nice abstractions, look for existing
  libraries to use before starting to roll you own!
- Use the graphs!
** DONE Day 10
:LOGBOOK:
CLOCK: [2021-12-10 Fri 20:22]--[2021-12-10 Fri 21:14] =>  0:52
CLOCK: [2021-12-10 Fri 17:00]--[2021-12-10 Fri 17:31] =>  0:31
CLOCK: [2021-12-10 Fri 07:12]--[2021-12-10 Fri 07:35] =>  0:23
:END:
*** Specification

- Input :: Lines of chunks, which may be *incomplete* or *corrupted*

- chunks ::
  - opened/closed with matching pairs of ~(),[],{},<>~
  - can be nested
  - spread out accross lines?
- corrupted line ::
  - A chunk closes with the wrong character
  - A corrupted chunk anywhere in a line corrupted whole line
- syntax error score ::
  - A corrupted line has score based on which incorrect bracket appears first
  - ~)~ :: 3 points
  - ~]~ :: 57 points
  - ~}~ :: 1197 points
  - ~>~ :: 25137 points
- incomplete line (part 2 only) ::
  - An incomplete line is missing closing brackets
- autocomplete score ::
  - base is 0
  - for each character added multiply the running score by 5
  - then increase total by th epoint value given in this table, based on the character:

    | bracket | points |
    |---------+--------|
    | ~)~     |      1 |
    | ~]~     |      2 |
    | ~}~     |      3 |
    | ~>~     |      4 |
  - so the scoring is given by a fold over the remaining characters where a
    function ~f : total:int -> char -> int = total * 5 + (score char)~


**** Part 1

- Output :: Sum of syntax error scores for each corrupted line

**** Part 2

- Output :: median of the *autocomplete scores* for each incomplete line

*** Implementation
[[./bin/day10.ml][Solution]]

**** Part 1

This is a balanced parenthesis problem.

- fold over the lines with an accumulator =score : int=
  - initialize an empty stack
  - explode line contents into characters
  - fold over chars with an accumulator =(stack : char Stack.t, error : char option)=
    - if =error= is =None=
      - open brackets are added to the stack
      - closed brackets pop a char off the stack
        - if the popped char is the matching bracket, proceed
        - if the popped char is not a match, then =error = Some char=
  - if the result of folding over he line chars is =Some char=, record the
    syntax error score corresponding to the =char= in the =score=.

**** Part 2

- Discard all *corrupted lines*
- For each remaining line
  - reverse he order of chars
  - proceed as with error detection, but instead of accumulating the =error
    option= accumulate all brackets that do not have an "opening" pair (really,
    these are the missing closing parens, but recall we are working in reverse order)
- Accumulate a sorted list of each completion score
- Finally, return the median

*** Reflection
**** Errors
- I didn't take into account the non-commutativity of the completion scoring
  operation, and was processing the closing brackets in reverse order, leading
  to incorrect scores.
- I had previously noted the non-commutativity of this scoring while reading the
  problem spec, so it was a clear oversight on my part to neglect this in my
  solution.
- It was probably assured by the fact that I neglected to make note of this
  property in my restatement of the spec.
**** To improve
- Note any key properties of the data/system while writing my own english spec.

** DONE Day 11
:LOGBOOK:
CLOCK: [2021-12-11 Sat 17:11]--[2021-12-11 Sat 17:51] =>  0:40
CLOCK: [2021-12-11 Sat 14:33]--[2021-12-11 Sat 16:42] =>  2:09
CLOCK: [2021-12-11 Sat 09:56]--[2021-12-11 Sat 10:39] =>  0:43
CLOCK: [2021-12-11 Sat 08:58]--[2021-12-11 Sat 09:31] =>  0:33
:END:
*** Specification
- Input: An *OctoMap*

- OctoMap :: A 2-d matrix of integers.
  - The position of the integer in the matrix represents the octopus' position
    relative to its *adjacent* octopodes
  - The value of the integer represents the octopus' *energy level*
- adjacent :: Octopodes that are above, below, at diagonals are adjacent, so
  ocotpodes have at most 8 adjacent companions
- energy level :: Energy level is a natural number.
  - It acts as a timer, incremented each *step*, and when adjacent octopodes
    *flash*.
  - When the timer increments beyond 9, the octopus *flashes* all adjacent octopodes, and resets
  to 0.
- step :: Gobal time increment, during which the following transitions occur:
  - Energy level of each octopus increments by 1
  - Any octopus with energy level > 9 *flashes*, which may cause adjacent
    octopodes to flash
  - Any octopus with an energy level > 9 is resent to 0
- flash ::
  - Octopodes at energy levels > 9 flash on a step before being reset.
  - When an octopus flashes, it increments the energy level of all adjacent octopodes
  - *But* an octopus can only flash at most once per step.
**** Part 1
- Output: The number of *octo-flashes* after 100 *steps*
*** Implementation
[[./bin/day11.ml][Solution]]

This is a combination of Day 9, where we had to search a matrix and reason about
adjacent positions, and Day 6, where we had to track counter states, so expect
to borrow code, ideas from those.
*** Reflection
**** Errors
- Missed one cordinate in the helper function written to select adjacent
  positions from matrix. Probably killed an hour of debugging.
- I've not been doing any unit testing. Shame on me. :/
- Debugging takes a long time, because I have to write out my printers, and put
  in printfs, then remove them.
**** To improve
- I don't like that the specs and plans are so far from the actual code.
  Starting from today, I will write the english language refinements as docs
  over the code itself. This is fitting, since the whole point of the =Domain=
  signature is to give a staticaly verified specification. (This imposes a bit
  of overhead today, as I'll have to copy over what I've written so far).
- Going forward, only the reflections will be recorded in these notes.
- Write unit tests/prop tests for any general purpose functions written
- Write pps for each data type
- Start using logging
** DONE Day 12
:LOGBOOK:
CLOCK: [2021-12-12 Sun 15:15]--[2021-12-12 Sun 15:44] =>  0:29
CLOCK: [2021-12-12 Sun 13:06]--[2021-12-12 Sun 14:36] =>  1:30
CLOCK: [2021-12-12 Sun 13:00]--[2021-12-12 Sun 13:06] =>  0:06
CLOCK: [2021-12-12 Sun 08:48]--[2021-12-12 Sun 09:31] =>  0:43
:END:

- [[./bin/day12.ml][Solution]]
*** Reflection
Writing the spec inline with the code worked well.
**** Errors
- Misread the spec of the part 2. I read it to allow entering every small cave
  twice. In face, it allowed entering the one small cave twice. I probably would
  have caught this, except I skipped the set of writing out the part 2 spec.
- Some simple implementation errors along the way, but just the usual.
  Having the logging lib set up helped debug much quicker.
**** To improve
- Don't take short cuts on part 2! :)

** STRT Day 13
:LOGBOOK:
CLOCK: [2021-12-13 Mon 22:33]
CLOCK: [2021-12-13 Mon 22:25]--[2021-12-13 Mon 22:32] =>  0:07
CLOCK: [2021-12-13 Mon 21:46]--[2021-12-13 Mon 22:25] =>  0:39
CLOCK: [2021-12-13 Mon 21:41]--[2021-12-13 Mon 21:46] =>  0:05
CLOCK: [2021-12-13 Mon 20:00]--[2021-12-13 Mon 21:06] =>  1:06
CLOCK: [2021-12-13 Mon 18:58]--[2021-12-13 Mon 19:46] =>  0:48
CLOCK: [2021-12-13 Mon 17:46]--[2021-12-13 Mon 17:59] =>  0:13
CLOCK: [2021-12-13 Mon 07:35]--[2021-12-13 Mon 07:36] =>  0:01
:END:
- [[./bin/day13.ml][Solution]]
*** Reflection
**** Errors
**** To improve

* Template
** Day <N>
- [[./bin/day<N>.ml][Solution]]
*** Reflection
**** Errors
**** To improve

* Tasks
** TODO Make a PR to add utility functions back into Zlist
 https://github.com/hakuch/zlist
** TODO Rename solutions to have prefixed 0
** TODO Ask containers whether they'd like a matrix library
** STRT Automate skeleton setup
:LOGBOOK:
CLOCK: [2021-12-13 Mon 07:15]--[2021-12-13 Mon 07:34] =>  0:19
:END:
** DONE make a PR to fix behavior of =Containers.Seq.to_array=
See: https://github.com/c-cube/ocaml-containers/pull/390
